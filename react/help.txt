import { useCookies } from "react-cookie";
import { useMutation } from "@tanstack/react-query";
import { Logger } from "./Logger";
import { Providers } from "./Providers";
import { useForm, type SubmitHandler } from "react-hook-form";

type Inputs = {
  email: string;
  password: string;
};

const LoginForm = () => {
  const [cookies, setCookie, removeCookie] = useCookies(["token"]);

  const mutation = useMutation({
    mutationFn: async (formData: Inputs) => {
      const res = await fetch(
        `${import.meta.env.PUBLIC_BACKEND_URL}/api/login`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        }
      );
      return await res.json();
    },
    onSuccess: (data) => {
      Logger.log("request response", data);
      setCookie("token", data.token, { path: "/" });
    },
    onError: (error) => {
      Logger.error("error", error);
    },
  });

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>();

  const onSubmit: SubmitHandler<Inputs> = (data) => mutation.mutate(data);

  return (
    <div className="bg-gray-200 h-full flex flex-col justify-center">
      <div className="flex justify-center">
        <div className="flex flex-col">
          <h1 className="text-2xl font-bold pb-4 border-b border-blue-400">
            Login !
          </h1>
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="flex flex-col gap-4 py-4"
          >
            <div className="flex flex-col">
              <label htmlFor="email">email</label>
              <input
                autoComplete="email"
                id="email"
                defaultValue="user@mail.com"
                {...register("email", { required: true })}
              />
              {errors.email && <span>This field is required</span>}
            </div>

            <div className="flex flex-col">
              <label htmlFor="password">password</label>
              <input
                id="password"
                type="password"
                {...register("password", { required: true })}
              />
              {errors.password && <span>This field is required</span>}
            </div>

            <button
              type="submit"
              className="bg-blue-400 text-white p-2 rounded"
            >
              Login
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Providers(LoginForm);
